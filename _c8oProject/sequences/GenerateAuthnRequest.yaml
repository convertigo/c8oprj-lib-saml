comment: Utility to compute a AuthnRequest. Can be signed if symbols lib_SAML.cert and lib_SAML.key.secret are defined.
↓GetSymbols [steps.SimpleStep-1711100530658]: 
  expression: |
    var cert = '${lib_SAML.cert=}';
    var key = '${lib_SAML.key.secret=}';
↓jIfThenElse [steps.IfThenElseStep-1711100553741]: 
  condition: cert == '' || key == ''
  ↓jThen [steps.ThenStep-1711100553743]: 
    ↓GenerateDeflateAndBase64Encode [steps.SimpleStep-1711100564066]: 
      expression: |
        '
        
        XML =
        "<samlp:AuthnRequest " +
            "xmlns:samlp=\"urn:oasis:names:tc:SAML:2.0:protocol\" "+
            "xmlns:saml=\"urn:oasis:names:tc:SAML:2.0:assertion\" "+
            "ID=\"" + "C8O_" +java.util.UUID.randomUUID().toString() + "\" "+
            "Version=\"2.0\" "+
            "IssueInstant=\"" + new Date().toISOString() + "\" "+
            "AssertionConsumerServiceIndex=\"0\" "+
            "AttributeConsumingServiceIndex=\"0\"> "+
            "<saml:Issuer>" + IDPEntityID + "</saml:Issuer>" +
            "<samlp:NameIDPolicy " + 
        	      "AllowCreate=\"true\" "+
        	      "Format=\"urn:oasis:names:tc:SAML:2.0:nameid-format:transient\"/>" +
        "</samlp:AuthnRequest>";
        
        xmlBytes  = new java.lang.String(XML).getBytes("UTF-8");
        deflater  = new java.util.zip.Deflater(java.util.zip.Deflater.DEFLATED, true);
        bytesOut  = new java.io.ByteArrayOutputStream();
        
        deflaterStream = new java.util.zip.DeflaterOutputStream(bytesOut, deflater);
        deflaterStream.write(xmlBytes, 0, xmlBytes.length);
        deflaterStream.close();
        deflater.finish();
        
        sAuthn 	= encodeURIComponent(org.apache.commons.codec.binary.Base64.encodeBase64String(bytesOut.toByteArray()));;
        
        
        '
  ↓jElse [steps.ElseStep-1711100553745]: 
    ↓SignGenerateDeflateAndBase64Encode [steps.SimpleStep-1711104814709]: 
      expression: |
        'ID = "C8O_" + java.util.UUID.randomUUID().toString();
        XML =
        "<samlp:AuthnRequest " +
            "xmlns:samlp=\"urn:oasis:names:tc:SAML:2.0:protocol\" "+
            "xmlns:saml=\"urn:oasis:names:tc:SAML:2.0:assertion\" "+
            "ID=\"" + ID + "\" "+
            "Version=\"2.0\" "+
            "IssueInstant=\"" + new Date().toISOString() + "\" "+
            "AssertionConsumerServiceIndex=\"0\" "+
            "AttributeConsumingServiceIndex=\"0\"> "+
            "<saml:Issuer>" + IDPEntityID + "</saml:Issuer>" +
            "<samlp:NameIDPolicy " + 
        	      "AllowCreate=\"true\" "+
        	      "Format=\"urn:oasis:names:tc:SAML:2.0:nameid-format:transient\"/>" +
        "</samlp:AuthnRequest>";
        
        log.debug(XML);
        // Parse it to XML
        var /*DocumentBuilderFactory*/ dbf = javax.xml.parsers.DocumentBuilderFactory.newInstance();
        dbf.setNamespaceAware(true);
        var /*Document*/ doc = dbf.newDocumentBuilder().parse(new java.io.ByteArrayInputStream(new java.lang.String(XML).getBytes("UTF-8")));
        log.debug("[SAML] response assertion is : \n"  + doc);
        var /*CertificateFactory*/ fact = java.security.cert.CertificateFactory.getInstance("X.509");
        cert = cert.replace(/(?:.*-+BEGIN CERTIFICATE-+)|(?:-+END CERTIFICATE-+.*)|\s/g, "");
        log.debug("cert: " + cert);
        cert = java.util.Base64.getDecoder().decode(cert);
        var /*X509Certificate*/ cer = /*(X509Certificate)*/ fact.generateCertificate(new java.io.ByteArrayInputStream(cert));
        var /*KeyFactory*/ kf = java.security.KeyFactory.getInstance("RSA");
        key = key.replace(/(?:.*-+BEGIN PRIVATE KEY-+)|(?:-+END PRIVATE KEY-+.*)|\s/g, "");
        log.debug("key: " + key);
        var /*PKCS8EncodedKeySpec*/ keySpac = new java.security.spec.PKCS8EncodedKeySpec(java.util.Base64.getDecoder().decode(key));
        var /*RSAPrivateKey*/ priv = /*(RSAPrivateKey)*/ kf.generatePrivate(keySpac);
        var /*DOMSignContext*/ dsc = new javax.xml.crypto.dsig.dom.DOMSignContext(priv, doc.getDocumentElement());
        var /*XMLSignatureFactory*/ fac = javax.xml.crypto.dsig.XMLSignatureFactory.getInstance("DOM");
        var /*Reference*/ ref = fac.newReference
                ("", fac.newDigestMethod(javax.xml.crypto.dsig.DigestMethod.SHA256, null),
                 java.util.List.of
                  (fac[''newTransform(java.lang.String,javax.xml.crypto.dsig.spec.TransformParameterSpec)'']
                    (javax.xml.crypto.dsig.Transform.ENVELOPED, /*(TransformParameterSpec)*/ null),
                    fac[''newCanonicalizationMethod(java.lang.String,javax.xml.crypto.dsig.spec.C14NMethodParameterSpec)'']("http://www.w3.org/2001/10/xml-exc-c14n#", /*(C14NMethodParameterSpec)*/ null)),
                 null, null);
        
        var /*SignedInfo*/ si = fac.newSignedInfo
                (fac[''newCanonicalizationMethod(java.lang.String,javax.xml.crypto.dsig.spec.C14NMethodParameterSpec)'']
                 (javax.xml.crypto.dsig.CanonicalizationMethod.INCLUSIVE_WITH_COMMENTS,
                  /*(C14NMethodParameterSpec)*/ null),
                 fac.newSignatureMethod("http://www.w3.org/2001/04/xmldsig-more#rsa-sha256", null),
                 java.util.List.of(ref));
        var /*KeyInfoFactory*/ kif = fac.getKeyInfoFactory();
        var /*X509Data*/ kv = kif.newX509Data(java.util.List.of(cer));
        var /*KeyInfo*/ ki = kif.newKeyInfo(java.util.List.of(kv));
        var /*XMLSignature*/ signature = fac.newXMLSignature(si, ki);
        signature.sign(dsc);
        var elt = doc.getElementsByTagName("SignatureValue").item(0);
        elt.setTextContent(elt.getTextContent().replaceAll("\r\n", ""));
        elt = doc.getElementsByTagName("X509Certificate").item(0);
        elt.setTextContent(elt.getTextContent().replaceAll("\r\n", ""));
        doc.getDocumentElement().insertBefore(doc.getElementsByTagName("Signature").item(0), doc.getElementsByTagName("saml:Issuer").item(0).getNextSibling());
        doc.getElementsByTagName("Reference").item(0).setAttribute("URI", "#" + ID);
        var /*TransformerFactory*/ tf = javax.xml.transform.TransformerFactory.newInstance();
        var /*Transformer*/ trans = tf.newTransformer();
        var /*StringWriter*/ sw = new java.io.StringWriter();
        trans.transform(new javax.xml.transform.dom.DOMSource(doc), new javax.xml.transform.stream.StreamResult(sw));
        
        XML = sw.toString();
        log.debug(XML);
        
        xmlBytes  = new java.lang.String(XML).getBytes("UTF-8");
        deflater  = new java.util.zip.Deflater(java.util.zip.Deflater.DEFLATED, true);
        bytesOut  = new java.io.ByteArrayOutputStream();
        
        deflaterStream = new java.util.zip.DeflaterOutputStream(bytesOut, deflater);
        deflaterStream.write(xmlBytes, 0, xmlBytes.length);
        deflaterStream.close();
        deflater.finish();
        
        sAuthn 	= encodeURIComponent(org.apache.commons.codec.binary.Base64.encodeBase64String(bytesOut.toByteArray()));;
        
        
        '
    ↓SignGenerateDeflateAndBase64EncodeLight [steps.SimpleStep-1711100568636]: 
      expression: |
        'ID = "C8O_" + java.util.UUID.randomUUID().toString();
        XML =
        "<samlp:AuthnRequest " +
            "xmlns:samlp=\"urn:oasis:names:tc:SAML:2.0:protocol\" "+
            "xmlns:saml=\"urn:oasis:names:tc:SAML:2.0:assertion\" "+
            "ID=\"" + ID + "\" "+
            "Version=\"2.0\" "+
            "IssueInstant=\"" + new Date().toISOString() + "\" "+
            "AssertionConsumerServiceIndex=\"0\" "+
            "AttributeConsumingServiceIndex=\"0\"> "+
            "<saml:Issuer>" + IDPEntityID + "</saml:Issuer>" +
            "<samlp:NameIDPolicy " + 
        	      "AllowCreate=\"true\" "+
        	      "Format=\"urn:oasis:names:tc:SAML:2.0:nameid-format:transient\"/>" +
        "</samlp:AuthnRequest>";
        
        log.debug(XML);// Importation des classes Java nécessaires
        
        var API = JavaImporter(
        	java.security.cert.CertificateFactory,
        	java.security.spec.PKCS8EncodedKeySpec,
        	java.security.KeyFactory,
        	java.util.Base64,
        	javax.xml.parsers.DocumentBuilderFactory,
        	javax.xml.crypto.dsig.XMLSignatureFactory,
        	javax.xml.crypto.dsig.dom.DOMSignContext,
        	javax.xml.crypto.dsig.spec.TransformParameterSpec,
        	javax.xml.crypto.dsig.spec.C14NMethodParameterSpec,
        	javax.xml.transform.TransformerFactory,
        	javax.xml.transform.dom.DOMSource,
        	javax.xml.transform.stream.StreamResult,
        	java.io.ByteArrayOutputStream,
        	java.io.ByteArrayInputStream,
        	java.lang.String);
        
        cert = cert.replace(/(?:.*-+BEGIN CERTIFICATE-+)|(?:-+END CERTIFICATE-+.*)|\s/g, "");
        log.debug("cert: " + cert);
        key = key.replace(/(?:.*-+BEGIN PRIVATE KEY-+)|(?:-+END PRIVATE KEY-+.*)|\s/g, "");
        log.debug("key: " + key);
        
        var certBase64 = cert; // Votre certificat en Base64
        var keyBase64 = key; // Votre clé privée en Base64
        
        with (API) {
        // Conversion du certificat et de la clé privée
        var certFactory = CertificateFactory.getInstance("X.509");
        var certif = certFactory.generateCertificate(new ByteArrayInputStream(Base64.getDecoder().decode(certBase64)));
        
        var keySpec = new PKCS8EncodedKeySpec(Base64.getDecoder().decode(keyBase64));
        var kf = KeyFactory.getInstance("RSA");
        var privateKey = kf.generatePrivate(keySpec);
        
        // Chargement du document XML
        var dbf = DocumentBuilderFactory.newInstance();
        dbf.setNamespaceAware(true);
        var doc = dbf.newDocumentBuilder().parse(new ByteArrayInputStream(new String(XML).getBytes("UTF-8")));
        doc.getDocumentElement().setIdAttribute("ID", true);
        
        // Création de la signature XML
        var fac = XMLSignatureFactory.getInstance("DOM");
        var fact = XMLSignatureFactory.__javaObject__.getMethod("newTransform", String.__javaObject__, TransformParameterSpec.__javaObject__);
        var facc = XMLSignatureFactory.__javaObject__.getMethod("newCanonicalizationMethod", String.__javaObject__, C14NMethodParameterSpec.__javaObject__);
        var ref = fac.newReference("", fac.newDigestMethod("http://www.w3.org/2001/04/xmlenc#sha256", null), [fact.invoke(fac, "http://www.w3.org/2000/09/xmldsig#enveloped-signature", null)], null, null);
        var si = fac.newSignedInfo(facc.invoke(fac, "http://www.w3.org/TR/2001/REC-xml-c14n-20010315", null), fac.newSignatureMethod("http://www.w3.org/2001/04/xmldsig-more#rsa-sha256", null), [ref]);
        
        var kif = fac.getKeyInfoFactory();
        var kv = kif.newX509Data(java.util.Collections.singletonList(certif));
        var ki = kif.newKeyInfo(java.util.Collections.singletonList(kv));
        
        // Création du contexte de signature DOM
        var dsc = new DOMSignContext(privateKey, doc.getDocumentElement());
        
        // Création et signature de l''XMLSignature
        var signature = fac.newXMLSignature(si, ki);
        signature.sign(dsc);
        
        var issuerElement = doc.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "Issuer").item(0);
        var signatureElement = doc.getElementsByTagNameNS("http://www.w3.org/2000/09/xmldsig#", "Signature").item(0);
        
        // Si l''élément Issuer a un élément suivant, insérez la signature avant cet élément. Sinon, ajoutez à la fin.
        if (issuerElement.nextSibling) {
            issuerElement.parentNode.insertBefore(signatureElement, issuerElement.nextSibling);
        } else {
            issuerElement.parentNode.appendChild(signatureElement);
        }
        
        doc.getElementsByTagName("Reference").item(0).setAttribute("URI", "#" + ID);
        
        // Transformation du document XML signé en chaîne
        var transformerFactory = TransformerFactory.newInstance();
        var transformer = transformerFactory.newTransformer();
        var outStream = new ByteArrayOutputStream();
        transformer.transform(new DOMSource(doc), new StreamResult(outStream));
        var signedXmlString = new java.lang.String(outStream.toByteArray(), "UTF-8");
        
        // Assignation de l''XML signé à la variable "XML"
        XML = signedXmlString;
        log.debug(XML);
        
        xmlBytes  = new java.lang.String(XML).getBytes("UTF-8");
        deflater  = new java.util.zip.Deflater(java.util.zip.Deflater.DEFLATED, true);
        bytesOut  = new java.io.ByteArrayOutputStream();
        
        deflaterStream = new java.util.zip.DeflaterOutputStream(bytesOut, deflater);
        deflaterStream.write(xmlBytes, 0, xmlBytes.length);
        deflaterStream.close();
        deflater.finish();
        
        sAuthn 	= encodeURIComponent(org.apache.commons.codec.binary.Base64.encodeBase64String(bytesOut.toByteArray()));;
        
        }
        '
      isEnabled: false
↓jElement [steps.ElementStep-1605977616787]: 
  expression: sAuthn
  nodeName: AuthnRequest
↓IDPEntityID [variables.RequestableVariable-1606035558565]: 
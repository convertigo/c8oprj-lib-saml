comment: Utility to compute a AuthnRequest
↓GenerateDefalteAndBAse64Encode [steps.SimpleStep-1605975616434]: 
  expression: |
    '
    
    XML =
    "<samlp:AuthnRequest " +
        "xmlns:samlp=\"urn:oasis:names:tc:SAML:2.0:protocol\" "+
        "xmlns:saml=\"urn:oasis:names:tc:SAML:2.0:assertion\" "+
        "ID=\"" + "C8O_" +java.util.UUID.randomUUID().toString() + "\" "+
        "Version=\"2.0\" "+
        "IssueInstant=\"" + new Date().toISOString() + "\" "+
        "AssertionConsumerServiceIndex=\"0\" "+
        "AttributeConsumingServiceIndex=\"0\"> "+
        "<saml:Issuer>" + IDPEntityID + "</saml:Issuer>" +
        "<samlp:NameIDPolicy " + 
    	      "AllowCreate=\"true\" "+
    	      "Format=\"urn:oasis:names:tc:SAML:2.0:nameid-format:transient\"/>" +
    "</samlp:AuthnRequest>";
    
    xmlBytes  = new java.lang.String(XML).getBytes("UTF-8");
    deflater  = new java.util.zip.Deflater(java.util.zip.Deflater.DEFLATED, true);
    bytesOut  = new java.io.ByteArrayOutputStream();
    
    deflaterStream = new java.util.zip.DeflaterOutputStream(bytesOut, deflater);
    deflaterStream.write(xmlBytes, 0, xmlBytes.length);
    deflaterStream.close();
    deflater.finish();
    
    sAuthn 	= encodeURIComponent(org.apache.commons.codec.binary.Base64.encodeBase64String(bytesOut.toByteArray()));;
    
    
    '
↓jElement [steps.ElementStep-1605977616787]: 
  expression: sAuthn
  nodeName: AuthnRequest
↓IDPEntityID [variables.RequestableVariable-1606035558565]: 
comment: Utility to compute a AuthnRequest
↓SignGenerateDeflateAndBase64Encode [steps.SimpleStep-1623158700789]: 
  expression: |
    'certificate = com.twinsoft.convertigo.engine.Engine.theApp.filePropertyManager.getFileFromProperty(certificate, context.projectName);
    privateKey = com.twinsoft.convertigo.engine.Engine.theApp.filePropertyManager.getFileFromProperty(privateKey, context.projectName);
    
    XML =
    "<samlp:AuthnRequest " +
        "xmlns:samlp=\"urn:oasis:names:tc:SAML:2.0:protocol\" "+
        "xmlns:saml=\"urn:oasis:names:tc:SAML:2.0:assertion\" "+
        "ID=\"" + "C8O_" +java.util.UUID.randomUUID().toString() + "\" "+
        "Version=\"2.0\" "+
        "IssueInstant=\"" + new Date().toISOString() + "\" "+
        "AssertionConsumerServiceIndex=\"0\" "+
        "AttributeConsumingServiceIndex=\"0\"> "+
        "<saml:Issuer>" + IDPEntityID + "</saml:Issuer>" +
        "<samlp:NameIDPolicy " + 
    	      "AllowCreate=\"true\" "+
    	      "Format=\"urn:oasis:names:tc:SAML:2.0:nameid-format:transient\"/>" +
    "</samlp:AuthnRequest>";
    
    log.debug(XML);
    // Parse it to XML
    var /*DocumentBuilderFactory*/ dbf = javax.xml.parsers.DocumentBuilderFactory.newInstance();
    dbf.setNamespaceAware(true);
    var /*Document*/ doc = dbf.newDocumentBuilder().parse(new java.io.ByteArrayInputStream(new java.lang.String(XML).getBytes("UTF-8")));
    log.debug("[SAML] response assertion is : \n"  + doc);
    var /*CertificateFactory*/ fact = java.security.cert.CertificateFactory.getInstance("X.509");
    var /*X509Certificate*/ cer = /*(X509Certificate)*/ fact.generateCertificate(new java.io.FileInputStream(certificate));
    var /*KeyFactory*/ kf = java.security.KeyFactory.getInstance("RSA");
    var /*String*/ pem = com.twinsoft.convertigo.engine.util.FileUtils.readFileToString(java.io.File(privateKey), "UTF-8");
    pem = pem.replaceAll("(?:.*-+BEGIN PRIVATE KEY-+)|(?:-+END PRIVATE KEY-+.*)|\\s", "");
    log.debug("pem: " + pem);
    var /*PKCS8EncodedKeySpec*/ keySpac = new java.security.spec.PKCS8EncodedKeySpec(java.util.Base64.getDecoder().decode(pem));
    var /*RSAPrivateKey*/ priv = /*(RSAPrivateKey)*/ kf.generatePrivate(keySpac);
    var /*DOMSignContext*/ dsc = new javax.xml.crypto.dsig.dom.DOMSignContext(priv, doc.getDocumentElement());
    var /*XMLSignatureFactory*/ fac = javax.xml.crypto.dsig.XMLSignatureFactory.getInstance("DOM");
    var /*Reference*/ ref = fac.newReference
            ("", fac.newDigestMethod(javax.xml.crypto.dsig.DigestMethod.SHA1, null),
             java.util.List.of
              (fac[''newTransform(java.lang.String,javax.xml.crypto.dsig.spec.TransformParameterSpec)'']
                (javax.xml.crypto.dsig.Transform.ENVELOPED, /*(TransformParameterSpec)*/ null),
                fac[''newCanonicalizationMethod(java.lang.String,javax.xml.crypto.dsig.spec.C14NMethodParameterSpec)'']("http://www.w3.org/2001/10/xml-exc-c14n#", /*(C14NMethodParameterSpec)*/ null)),
             null, null);
    ;
    var /*SignedInfo*/ si = fac.newSignedInfo
            (fac[''newCanonicalizationMethod(java.lang.String,javax.xml.crypto.dsig.spec.C14NMethodParameterSpec)'']
             (javax.xml.crypto.dsig.CanonicalizationMethod.INCLUSIVE_WITH_COMMENTS,
              /*(C14NMethodParameterSpec)*/ null),
             fac.newSignatureMethod("http://www.w3.org/2000/09/xmldsig#rsa-sha1", null),
             java.util.List.of(ref));
    var /*KeyInfoFactory*/ kif = fac.getKeyInfoFactory();
    var /*X509Data*/ kv = kif.newX509Data(java.util.List.of(cer));
    var /*KeyInfo*/ ki = kif.newKeyInfo(java.util.List.of(kv));
    var /*XMLSignature*/ signature = fac.newXMLSignature(si, ki);
    signature.sign(dsc);
    var elt = doc.getElementsByTagName("SignatureValue").item(0);
    elt.setTextContent(elt.getTextContent().replaceAll("\r\n", ""));
    elt = doc.getElementsByTagName("X509Certificate").item(0);
    elt.setTextContent(elt.getTextContent().replaceAll("\r\n", ""));
    doc.getDocumentElement().insertBefore(doc.getElementsByTagName("Signature").item(0), doc.getElementsByTagName("saml:Issuer").item(0).getNextSibling());
    var /*TransformerFactory*/ tf = javax.xml.transform.TransformerFactory.newInstance();
    var /*Transformer*/ trans = tf.newTransformer();
    var /*StringWriter*/ sw = new java.io.StringWriter();
    trans.transform(new javax.xml.transform.dom.DOMSource(doc), new javax.xml.transform.stream.StreamResult(sw));
    
    XML = sw.toString();
    log.debug(XML);
    
    xmlBytes  = new java.lang.String(XML).getBytes("UTF-8");
    deflater  = new java.util.zip.Deflater(java.util.zip.Deflater.DEFLATED, true);
    bytesOut  = new java.io.ByteArrayOutputStream();
    
    deflaterStream = new java.util.zip.DeflaterOutputStream(bytesOut, deflater);
    deflaterStream.write(xmlBytes, 0, xmlBytes.length);
    deflaterStream.close();
    deflater.finish();
    
    sAuthn 	= encodeURIComponent(org.apache.commons.codec.binary.Base64.encodeBase64String(bytesOut.toByteArray()));;
    
    
    '
↓jElement [steps.ElementStep-1623158700793]: 
  expression: sAuthn
  nodeName: AuthnRequest
↓IDPEntityID [variables.RequestableVariable-1623158700796]: 
↓certificate [variables.RequestableVariable-1623233750338]: 
↓privateKey [variables.RequestableVariable-1623233772433]: 
↓TestOk [core.TestCase]: 
  ↓IDPEntityID [variables.TestCaseVariable-1623234401984]: 
    value: testConvertigo
  ↓certificate [variables.TestCaseVariable-1623234401986]: 
    value: .//test/certificate.crt
  ↓privateKey [variables.TestCaseVariable-1623234401988]: 
    value: .//test/privateKey.key
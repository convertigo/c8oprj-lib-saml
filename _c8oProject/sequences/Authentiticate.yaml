comment: This sequence is called by th IDP with a SAMLResponse Token. 
↓Input_variables [steps.InputVariablesStep-1605537182190]: 
↓jBase64EncodedSAML [steps.SimpleSourceStep-1605538001093]: 
  sourceDefinition: 
    - xmlizable: 
      - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
      - com.twinsoft.convertigo.beans.common.XMLVector: 
        - java.lang.String: 
          - ↑value: 1605537182190
        - java.lang.String: 
          - ↑value: ./SAMLResponse/text()
  variableName: jBase64EncodedSAML
↓VerifyUsingXMLSignature [steps.SimpleStep-1605705602994]: 
  comment: Where the magic happens...
  expression: |
    '/**
     * This code verifies the SAML assertion based on XMLsecurity API
     */
    
    // Assume not Valid
    bValid = false;
    
    // Decode the token from Base64
    baisSAML = new java.io.ByteArrayInputStream(
    		org.apache.commons.codec.binary.Base64.decodeBase64(jBase64EncodedSAML)
    );
    
    // Parse it to XML
    try {
    	dbf = javax.xml.parsers.DocumentBuilderFactory.newInstance();
    	dbf.setNamespaceAware(true);
    	dom = dbf.newDocumentBuilder().parse(baisSAML);
    	log.debug("[SAML] response assertion is : \n"  + com.twinsoft.convertigo.engine.util.XMLUtils.prettyPrintDOM(dom));
    } catch  (error ){
    	log.error("[SAML] response assertion is not XML parsable : " + error);
    }
    
    // We will use the Convertigo XPath API..
    twsApi = new com.twinsoft.convertigo.engine.util.TwsCachedXPathAPI();
    
    //Declare a KeySelectorResult we will use in our verification process...
    KeySelectorResult = new JavaAdapter(javax.xml.crypto.KeySelectorResult, {
    	putKey: function(key) {
    		this.myKey = key;
    	},
    	getKey: function() {
    		return this.myKey;	
    	}	
    });
    
    
    // Declare a Custom X509 KeySelector we will use in uour verification process...
    MyX509KeySelector = new JavaAdapter(javax.xml.crypto.KeySelector, {
    	select: function(keyInfo, purpose, method, context) {
    	      ki = keyInfo.getContent().iterator();
    	      while(true) {
    	         var info;
    	         do {
    	            if (!ki.hasNext()) {
    					log.error("[SAML] X509 KeySelector: No key found!");
    					return;
    	            }
    	            info = ki.next();
    	         } while(!(info instanceof javax.xml.crypto.dsig.keyinfo.X509Data));
    	
    	         x509Data = info;
    	         xi = x509Data.getContent().iterator();
    	
    	         while(xi.hasNext()) {
    	            o = xi.next();
    	            if (o instanceof java.security.cert.X509Certificate) {
    	               key = o.getPublicKey();
    	               if (this.algEquals(method.getAlgorithm(), key.getAlgorithm())) {
    						log.debug("[SAML] X509 KeySelector: Found matching algorithm ...");
    						KeySelectorResult.putKey(key);
    						return KeySelectorResult;
    	               }
    	            }
    	         }
    	      }
    	   	},
    
    		algEquals: function (algURI, algName) {
    			log.debug("[SAML] X509 KeySelector: check Algorithms : " +  algURI + " / " + algName);
    			return algName.equalsIgnoreCase("DSA") && algURI.equalsIgnoreCase("http://www.w3.org/2000/09/xmldsig#dsa-sha1")
    					|| algName.equalsIgnoreCase("RSA")
    							&& algURI.equalsIgnoreCase("http://www.w3.org/2001/04/xmldsig-more#rsa-sha256")
    					|| algName.equalsIgnoreCase("RSA")
    							&& algURI.equalsIgnoreCase("http://www.w3.org/2001/04/xmldsig-more#rsa-sha224")
    					|| algName.equalsIgnoreCase("RSA")
    							&& algURI.equalsIgnoreCase("http://www.w3.org/2001/04/xmldsig-more#rsa-sha384")
    					|| algName.equalsIgnoreCase("RSA")
    							&& algURI.equalsIgnoreCase("http://www.w3.org/2001/04/xmldsig-more#rsa-sha512")
    					|| algName.equalsIgnoreCase("RSA")
    							&& algURI.equalsIgnoreCase("http://www.w3.org/2000/09/xmldsig#rsa-sha1");
    		}
    });
    
    // Create a Custom URIdeferencer see https://issues.apache.org/jira/browse/SANTUARIO-312
    MyUriDereferencer = new JavaAdapter(javax.xml.crypto.URIDereferencer, {
    	dereference: function(uriRef,  context) {
    		 log.debug("[SAML] dereference entered");
    		 if (uriRef == null) {
    	            throw new NullPointerException("uriRef cannot be null");
    	        }
    	        if (context == null) {
    	            throw new NullPointerException("context cannot be null");
    	        }
    
    	        
    	        domRef 	= uriRef;
    	        uriAttr = domRef.getHere();
    	        uri 	= uriRef.getURI() + "";
    	        dcc 	= context;
    	        baseURI = context.getBaseURI();
    
    			log.debug("[SAML] compute ID, uri : " + uri);
    
    	        // Check if same-document URI and already registered on the context
    	        if (uri != null && uri.length != 0  && uri.charAt(0) == ''#'') {
    				log.debug("[SAML] uri is valid : " + uri);
    
    	            id = uri.substring(1);
    
    	            if (id.startsWith("xpointer(id(")) {
    	                i1 = id.indexOf(''\'''');
    	                i2 = id.indexOf(''\'''', i1+1);
    	                id = id.substring(i1+1, i2);
    	            }
    
    				log.debug("[SAML] id is  : " + id);
    
    	            // check if element is registered by Id as we can be sure of the ID case we try each combination...
    				referencedElem  = twsApi.selectNode(uriAttr.getOwnerDocument(), "//*[@ID =''" + id + "''] | //*[@Id =''" + id + "''] | //*[@id =''" + id + "'']");
    				
    	            // referencedElem = uriAttr.getOwnerDocument().getElementById(id);
    	            if (referencedElem == null) {
    	               // see if element is registered in DOMCryptoContext
    	               referencedElem = dcc.getElementById(id);
    	            }
    	            if (referencedElem != null) {
    	                log.debug("[SAML] We have a referencedElem !");
    
    	                result = new com.sun.org.apache.xml.internal.security.signature.XMLSignatureInput(referencedElem);
    	                if (!uri.substring(1).startsWith("xpointer(id(")) {
    	                    result.setExcludeComments(true);
    	                }
    
    	                result.setMIMEType("text/xml");
    	                if (baseURI != null && baseURI.length() > 0) {
    	                    result.setSourceURI(baseURI.concat(uriAttr.getNodeValue()));
    	                } else {
    	                    result.setSourceURI(uriAttr.getNodeValue());
    	                }
    	                
    	                log.debug("[SAML] Result Computed .. " + result);
    	                return new org.jcp.xml.dsig.internal.dom.ApacheNodeSetData(result);
    	            }
    	        }
    	}
    });
    
    
    //Find Signature element.
    nl = dom.getElementsByTagNameNS(
    	javax.xml.crypto.dsig.XMLSignature.XMLNS,
    	"Signature"
    );
    
    /**
     * Verify Signature using XMLSecurity APIs
     */
    if (nl.getLength() != 0) {
    	//Create a DOM XMLSignatureFactory that will be used to
    	//generate the enveloped signature.
    	fac = javax.xml.crypto.dsig.XMLSignatureFactory.getInstance("DOM");
    	
    	//Create a DOMValidateContext and specify a KeySelector
    	//and document context.
    	/*
    	domValContext = new javax.xml.crypto.dsig.dom.DOMValidateContext(
    		new com.convertigo.saml.X509KeySelector(),
    		nl.item(0)
    	);
    	*/
    	domValContext = new javax.xml.crypto.dsig.dom.DOMValidateContext(
    		MyX509KeySelector,
    		nl.item(0)
    	);
    
    
    
    	// Use our Custom URI Deferencer for fix a JRE > 1.7 Restriction
    	domValContext.setURIDereferencer(MyUriDereferencer)
    	
    	//Unmarshal the XMLSignature.
    	xmlSignature = fac.unmarshalXMLSignature(domValContext)
    	
    	//Validate the XMLSignature.
    	bValid = xmlSignature.validate(domValContext);
    	if (bValid) {
    		log.debug("[SAML] response assertion is valid !");
    		
    		// UserID should be in the the NameID
    		UserID = "saml2:" + twsApi.selectNode(dom, "//NameID").getTextContent();
    		
    		// Special case for AzureAD , Seems the NameID is opaque we try to get the claim/name
    		ClaimNameNode = twsApi.selectNode(dom, "//Attribute[@Name = ''http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name'']")
    		if (ClaimNameNode != null)
    			UserID = "saml2:" + ClaimNameNode.getTextContent();
    			
    		// Save our Token in the session so we can check if we are Already Authenticated
    		context.httpServletRequest.getSession().setAttribute("SAMLToken", dom);
    	}
    	else {
    		log.error("[SAML] response assertion is invalid !");
    	    sv = xmlSignature.getSignatureValue().validate(domValContext);
    
            // Check the validation status of each Reference.
            i = xmlSignature.getSignedInfo().getReferences().iterator();
            for (j=0; i.hasNext(); j++) {
    			ref = i.next();
                refValid = ref.validate(domValContext);
                log.error("[SAML] " + ref.getURI() + " validity status is: " + refValid);
            }
    	}
    } else {
    	log.error("[SAML] No Signature Node found !");
    }
    
    '
↓jElement [steps.ElementStep-1605622044150]: 
  expression: bValid
  nodeName: Verified
↓IfExistThenElse [steps.IfExistThenElseStep-1605959536731]: 
  sourceDefinition: 
    - xmlizable: 
      - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
      - com.twinsoft.convertigo.beans.common.XMLVector: 
        - java.lang.String: 
          - ↑value: 1605622044150
        - java.lang.String: 
          - ↑value: .[text() = 'true']
  ↓jThen [steps.ThenStep-1605959537216]: 
    ↓jElement1 [steps.ElementStep-1605897063345]: 
      expression: UserID
      nodeName: UserID
    ↓Set_authenticated_user [steps.SetAuthenticatedUserStep-1605959724596]: 
      userid: 
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.steps.SmartType
          - SmartType: 
            - ↑mode: SOURCE
            - com.twinsoft.convertigo.beans.common.XMLVector: 
              - java.lang.String: 
                - ↑value: 1605897063345
              - java.lang.String: 
                - ↑value: ./text()
    ↓RedirectToRelayStateValue [steps.SetResponseHeaderStep-1606117861501]: 
      headerName: 
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.steps.SmartType
          - SmartType: 
            - ↑mode: PLAIN
            - →→: Location
      headerValue: 
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.steps.SmartType
          - SmartType: 
            - ↑mode: SOURCE
            - com.twinsoft.convertigo.beans.common.XMLVector: 
              - java.lang.String: 
                - ↑value: 1605537182190
              - java.lang.String: 
                - ↑value: ./RelayState/text()
    ↓ResponseStatus302 [steps.SetResponseStatusStep-1606136508332]: 
      statusCode: 
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.steps.SmartType
          - SmartType: 
            - ↑mode: PLAIN
            - →→: 302
      statusText: 
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.steps.SmartType
          - SmartType: 
            - ↑mode: PLAIN
            - →→: Redirect
  ↓jElse [steps.ElseStep-1605959537218]: 
    ↓Remove_authenticated_user [steps.RemoveAuthenticatedUserStep-1605960019315]: 
    ↓Remove_from_session [steps.SessionRemoveStep-1605960036098]: 
      key: SAMLToken
    ↓Error_structure [steps.XMLErrorStep-1605959639011]: 
      code: 
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.steps.SmartType
          - SmartType: 
            - ↑mode: PLAIN
            - →→: 100
      message: 
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.steps.SmartType
          - SmartType: 
            - ↑mode: PLAIN
            - →→: Not a Valid SAML Token
↓SAMLResponse [variables.RequestableVariable-1605537029507]: 
  comment: The SAMLresponse Token base64 encoded
↓RelayState [variables.RequestableVariable-1606116350150]: 
  comment: An opaque value relayed by the IDP. In our case, the App's URL to be redirected when Auth is done
↓TestKOAlteratedContent [core.TestCase]: 
  ↓SAMLResponse [variables.TestCaseVariable-1605896076676]: 
    value: PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9Im5vIj8+PHNhbWwycDpSZXNwb25zZSB4bWxuczpzYW1sMnA9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpwcm90b2NvbCIgRGVzdGluYXRpb249Imh0dHBzOi8vcGVkcm8uY29udmVydGlnby5uZXQvY29udmVydGlnby9hcGkvU0FNTCIgSUQ9Il80MzFhZWQzYjdiYzRkNDY0MTgxOWM1ZDMyM2RkNmFlMCIgSXNzdWVJbnN0YW50PSIyMDIwLTExLTE3VDE0OjQ2OjQxLjAwOVoiIFZlcnNpb249IjIuMCI+PHNhbWwyOklzc3VlciB4bWxuczpzYW1sMj0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmFzc2VydGlvbiI+aHR0cHM6Ly9hY2NvdW50cy5nb29nbGUuY29tL28vc2FtbDI/aWRwaWQ9QzAybXlvbjFxPC9zYW1sMjpJc3N1ZXI+PHNhbWwycDpTdGF0dXM+PHNhbWwycDpTdGF0dXNDb2RlIFZhbHVlPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6c3RhdHVzOlN1Y2Nlc3MiLz48L3NhbWwycDpTdGF0dXM+PHNhbWwyOkFzc2VydGlvbiB4bWxuczpzYW1sMj0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmFzc2VydGlvbiIgSUQ9Il9iNmY0ODFlMWQ0NjFhYjEwZmU3OGYwMmM0M2RiYmVjNyIgSXNzdWVJbnN0YW50PSIyMDIwLTExLTE3VDE0OjQ2OjQxLjAwOVoiIFZlcnNpb249IjIuMCI+PHNhbWwyOklzc3Vlcj5odHRwczovL2FjY291bnRzLmdvb2dsZS5jb20vby9zYW1sMj9pZHBpZD1DMDJteW9uMXE8L3NhbWwyOklzc3Vlcj48ZHM6U2lnbmF0dXJlIHhtbG5zOmRzPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjIj48ZHM6U2lnbmVkSW5mbz48ZHM6Q2Fub25pY2FsaXphdGlvbk1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMTAveG1sLWV4Yy1jMTRuIyIvPjxkczpTaWduYXR1cmVNZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzA0L3htbGRzaWctbW9yZSNyc2Etc2hhMjU2Ii8+PGRzOlJlZmVyZW5jZSBVUkk9IiNfYjZmNDgxZTFkNDYxYWIxMGZlNzhmMDJjNDNkYmJlYzciPjxkczpUcmFuc2Zvcm1zPjxkczpUcmFuc2Zvcm0gQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjZW52ZWxvcGVkLXNpZ25hdHVyZSIvPjxkczpUcmFuc2Zvcm0gQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzEwL3htbC1leGMtYzE0biMiLz48L2RzOlRyYW5zZm9ybXM+PGRzOkRpZ2VzdE1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMDQveG1sZW5jI3NoYTI1NiIvPjxkczpEaWdlc3RWYWx1ZT5GOGhjN01CMGxPQ2VjOHFJRzJGKzRPa1JYUCs4cm9QeURFRXZuQTBQRUhBPTwvZHM6RGlnZXN0VmFsdWU+PC9kczpSZWZlcmVuY2U+PC9kczpTaWduZWRJbmZvPjxkczpTaWduYXR1cmVWYWx1ZT5wWUY1bnFpWjYydmY4MUNIcFVlWkpSVmM1bEtKMnUxMVBBUGI2Q3V0ek8vVDdROTRTSHRMTFVuM3hZZ0FPY1BPU0FVYktBZFkzRDZWDQoybHpkUEZLVVhUc2lobVlVZUxsUDdvR0tDUjZkSzIzUnJaSC9rdlZMSFhmMmJjSlJxRXQ0Rk5mWjRXb1d0UitnanliMHRjbk9PVXJzDQpYRzVNeVlOZDZYcXZUSnJrZ2RqUkRURm9ZZTdyNUFWb3lhQTlFUzBZbStlRnIralMvR3RwS2FwNThNeXorNk9MT3pIMytkQjJWOHhFDQpsbUJqdkRCb1VSNGk3SkVON1k3RlZ1V0hkSHY3RC9HN2N2bzVZdnlBMDRXS3Q4dGcvT0txdGRLQUprWmhTalR5WE1wZ0ZwVnVRVkhNDQpiZWtYalZwNDJvUTVDOENIVU9ZZzJaejQwU2FvQWpsMy9tU05NZz09PC9kczpTaWduYXR1cmVWYWx1ZT48ZHM6S2V5SW5mbz48ZHM6WDUwOURhdGE+PGRzOlg1MDlTdWJqZWN0TmFtZT5TVD1DYWxpZm9ybmlhLEM9VVMsT1U9R29vZ2xlIEZvciBXb3JrLENOPUdvb2dsZSxMPU1vdW50YWluIFZpZXcsTz1Hb29nbGUgSW5jLjwvZHM6WDUwOVN1YmplY3ROYW1lPjxkczpYNTA5Q2VydGlmaWNhdGU+TUlJRGREQ0NBbHlnQXdJQkFnSUdBWFRpMU5GYU1BMEdDU3FHU0liM0RRRUJDd1VBTUhzeEZEQVNCZ05WQkFvVEMwZHZiMmRzWlNCSg0KYm1NdU1SWXdGQVlEVlFRSEV3MU5iM1Z1ZEdGcGJpQldhV1YzTVE4d0RRWURWUVFERXdaSGIyOW5iR1V4R0RBV0JnTlZCQXNURDBkdg0KYjJkc1pTQkdiM0lnVjI5eWF6RUxNQWtHQTFVRUJoTUNWVk14RXpBUkJnTlZCQWdUQ2tOaGJHbG1iM0p1YVdFd0hoY05NakF4TURBeA0KTURZeU16VXdXaGNOTWpVd09UTXdNRFl5TXpVd1dqQjdNUlF3RWdZRFZRUUtFd3RIYjI5bmJHVWdTVzVqTGpFV01CUUdBMVVFQnhNTg0KVFc5MWJuUmhhVzRnVm1sbGR6RVBNQTBHQTFVRUF4TUdSMjl2WjJ4bE1SZ3dGZ1lEVlFRTEV3OUhiMjluYkdVZ1JtOXlJRmR2Y21zeA0KQ3pBSkJnTlZCQVlUQWxWVE1STXdFUVlEVlFRSUV3cERZV3hwWm05eWJtbGhNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QQ0KTUlJQkNnS0NBUUVBN3NnQ2JRTHc1MTlkcDA1aUN3UEhpQ3FzSzRjZ0VYL21lS0Nyak5iY1ZwWlRIbUhSYTBvU0RTOC9hNXkvM0lQYQ0KbVBlNlk3R21IYmZSSWVVeXFlbTNqSnVxSTZQZzlhZm5TZG1SVXY0T1pJVHFsQjhvWTdtTCtYSEVRTXBPRzRKOTFiQVlQREVKU0JkZA0KMmoxSjJtazN5ejFzbEVtVmJnbXB0bjYybGZiN1Q4L3czcHNwK1ZRR2VXVnRFM0RGUG9VMVhFWXNCY3luQmN3Zlgva3I0b09sWVlRMA0KTVpmdU5BUUErWmRFYU1keVpIR0FRMldlcGQyNUdZZ0FTUTlDSEpMOHdHbWt3RVFsYnhwR1R6c1k5akIxM3UxcElMVjlUSjU0b3VuZA0KS0RCVzAwVk9BelZvejZZZ2lxNG9Ia1M4TVR5Nlpxdy96ZkxCU0Iya3MxT09Ja2JieVFJREFRQUJNQTBHQ1NxR1NJYjNEUUVCQ3dVQQ0KQTRJQkFRQnNBZWdpRUZZU3p3RTZ6emF0ZlcwY0lodWV0VkViZ0xnOEpnSUE5aGVQcGIxd3o5Vlc1NUNveFVTSitKdHZRaWFLRS81eA0KMGlpWDE3S2o1WnAzaElqcG9lZWxUT3JxSDRCR0tPY2xGTjhLYXRkd0s1MmNEMTBKWUFYMExiOHM5YUw3UkJJYStIWnFJeWhIMnRwRA0KSWxmZ0Zwdi8xS0tQcWtaR1FWaWwrZGp5SVlNdzgvZzQ1YXBKbVArcDM5bnpYQk5vRWR1MXU1WDZobllFS1JYb1BXNW4yM2IvT0ZwWg0KRXZkZnVtaHIxaUhiSC9LKy9neEVURVlBcEJ4MmdoUXgyN3BUZlVuTkJxTUxuRmRvT3dYMFFXamdBY1VDd3FUZU5VcHY2TEJpMnMwNg0KV1plUVBhenRTZ0NZV21HZzUzL2tOYWFSWjMwQXg2Wk0yYmJVcWxpeCt5bWQ8L2RzOlg1MDlDZXJ0aWZpY2F0ZT48L2RzOlg1MDlEYXRhPjwvZHM6S2V5SW5mbz48L2RzOlNpZ25hdHVyZT48c2FtbDI6U3ViamVjdD48c2FtbDI6TmFtZUlEIEZvcm1hdD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6MS4xOm5hbWVpZC1mb3JtYXQ6WDUwOVN1YmplY3ROYW1lIj5YWFhvbGl2aWVycEBjb252ZXJ0aWdvLmNvbTwvc2FtbDI6TmFtZUlEPjxzYW1sMjpTdWJqZWN0Q29uZmlybWF0aW9uIE1ldGhvZD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmNtOmJlYXJlciI+PHNhbWwyOlN1YmplY3RDb25maXJtYXRpb25EYXRhIE5vdE9uT3JBZnRlcj0iMjAyMC0xMS0xN1QxNDo1MTo0MS4wMDlaIiBSZWNpcGllbnQ9Imh0dHBzOi8vcGVkcm8uY29udmVydGlnby5uZXQvY29udmVydGlnby9hcGkvU0FNTCIvPjwvc2FtbDI6U3ViamVjdENvbmZpcm1hdGlvbj48L3NhbWwyOlN1YmplY3Q+PHNhbWwyOkNvbmRpdGlvbnMgTm90QmVmb3JlPSIyMDIwLTExLTE3VDE0OjQxOjQxLjAwOVoiIE5vdE9uT3JBZnRlcj0iMjAyMC0xMS0xN1QxNDo1MTo0MS4wMDlaIj48c2FtbDI6QXVkaWVuY2VSZXN0cmljdGlvbj48c2FtbDI6QXVkaWVuY2U+aHR0cHM6Ly9wZWRyby5jb252ZXJ0aWdvLm5ldC9jb252ZXJ0aWdvPC9zYW1sMjpBdWRpZW5jZT48L3NhbWwyOkF1ZGllbmNlUmVzdHJpY3Rpb24+PC9zYW1sMjpDb25kaXRpb25zPjxzYW1sMjpBdXRoblN0YXRlbWVudCBBdXRobkluc3RhbnQ9IjIwMjAtMTEtMTdUMTQ6NDU6NDcuMDAwWiIgU2Vzc2lvbkluZGV4PSJfYjZmNDgxZTFkNDYxYWIxMGZlNzhmMDJjNDNkYmJlYzciPjxzYW1sMjpBdXRobkNvbnRleHQ+PHNhbWwyOkF1dGhuQ29udGV4dENsYXNzUmVmPnVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphYzpjbGFzc2VzOnVuc3BlY2lmaWVkPC9zYW1sMjpBdXRobkNvbnRleHRDbGFzc1JlZj48L3NhbWwyOkF1dGhuQ29udGV4dD48L3NhbWwyOkF1dGhuU3RhdGVtZW50Pjwvc2FtbDI6QXNzZXJ0aW9uPjwvc2FtbDJwOlJlc3BvbnNlPg==
↓TestKONotParsableXML [core.TestCase]: 
  ↓SAMLResponse [variables.TestCaseVariable-1605895674965]: 
    value: PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9Im5vIj8+PHNhbWwycDpSZXNwb25zZSB4bWxuczpzYW1sMnA9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpwcm90b2NvbCIgRGVzdGluYXRpb249Imh0dHBzOi8vcGVkcm8uY29udmVydGlnby5uZXQvY29udmVydGlnby9hcGkvU0FNTCIgSUQ9Il80MzFhZWQzYjdiYzRkNDY0MTgxOWM1ZDMyM2RkNmFlMCIgSXNzdWVJbnN0YW50PSIyMDIwLTExLTE3VDE0OjQ2OjQxLjAwOVoiIFZlcnNpb249IjIuMCI+PHNhbWwyOklzc3VlciB4bWxuczpzYW1sMj0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmFzc2VydGlvbiI+aHR0cHM6Ly9hY2NvdW50cy5nb29nbGUuY29tL28vc2FtbDI\/aWRwaWQ9QzAybXlvbjFxPC9zYW1sMjpJc3N1ZXI+PHNhbWwycDpTdGF0dXM+PHNhbWwycDpTdGF0dXNDb2RlIFZhbHVlPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6c3RhdHVzOlN1Y2Nlc3MiLz48L3NhbWwycDpTdGF0dXM+PHNhbWwyOkFzc2VydGlvbiB4bWxuczpzYW1sMj0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmFzc2VydGlvbiIgSUQ9Il9iNmY0ODFlMWQ0NjFhYjEwZmU3OGYwMmM0M2RiYmVjNyIgSXNzdWVJbnN0YW50PSIyMDIwLTExLTE3VDE0OjQ2OjQxLjAwOVoiIFZlcnNpb249IjIuMCI+PHNhbWwyOklzc3Vlcj5odHRwczovL2FjY291bnRzLmdvb2dsZS5jb20vby9zYW1sMj9pZHBpZD1DMDJteW9uMXE8L3NhbWwyOklzc3Vlcj48ZHM6U2lnbmF0dXJlIHhtbG5zOmRzPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjIj48ZHM6U2lnbmVkSW5mbz48ZHM6Q2Fub25pY2FsaXphdGlvbk1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMTAveG1sLWV4Yy1jMTRuIyIvPjxkczpTaWduYXR1cmVNZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzA0L3htbGRzaWctbW9yZSNyc2Etc2hhMjU2Ii8+PGRzOlJlZmVyZW5jZSBVUkk9IiNfYjZmNDgxZTFkNDYxYWIxMGZlNzhmMDJjNDNkYmJlYzciPjxkczpUcmFuc2Zvcm1zPjxkczpUcmFuc2Zvcm0gQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjZW52ZWxvcGVkLXNpZ25hdHVyZSIvPjxkczpUcmFuc2Zvcm0gQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzEwL3htbC1leGMtYzE0biMiLz48L2RzOlRyYW5zZm9ybXM+PGRzOkRpZ2VzdE1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMDQveG1sZW5jI3NoYTI1NiIvPjxkczpEaWdlc3RWYWx1ZT5GOGhjN01CMGxPQ2VjOHFJRzJGKzRPa1JYUCs4cm9QeURFRXZuQTBQRUhBPTwvZHM6RGlnZXN0VmFsdWU+PC9kczpSZWZlcmVuY2U+PC9kczpTaWduZWRJbmZvPjxkczpTaWduYXR1cmVWYWx1ZT5wWUY1bnFpWjYydmY4MUNIcFVlWkpSVmM1bEtKMnUxMVBBUGI2Q3V0ek8vVDdROTRTSHRMTFVuM3hZZ0FPY1BPU0FVYktBZFkzRDZWCjJsemRQRktVWFRzaWhtWVVlTGxQN29HS0NSNmRLMjNSclpIL2t2VkxIWGYyYmNKUnFFdDRGTmZaNFdvV3RSK2dqeWIwdGNuT09VcnMKWEc1TXlZTmQ2WHF2VEpya2dkalJEVEZvWWU3cjVBVm95YUE5RVMwWW0rZUZyK2pTL0d0cEthcDU4TXl6KzZPTE96SDMrZEIyVjh4RQpsbUJqdkRCb1VSNGk3SkVON1k3RlZ1V0hkSHY3RC9HN2N2bzVZdnlBMDRXS3Q4dGcvT0txdGRLQUprWmhTalR5WE1wZ0ZwVnVRVkhNCmJla1hqVnA0Mm9RNUM4Q0hVT1lnMlp6NDBTYW9BamwzL21TTk1nPT08L2RzOlNpZ25hdHVyZVZhbHVlPjxkczpLZXlJbmZvPjxkczpYNTA5RGF0YT48ZHM6WDUwOVN1YmplY3ROYW1lPlNUPUNhbGlmb3JuaWEsQz1VUyxPVT1Hb29nbGUgRm9yIFdvcmssQ049R29vZ2xlLEw9TW91bnRhaW4gVmlldyxPPUdvb2dsZSBJbmMuPC9kczpYNTA5U3ViamVjdE5hbWU+PGRzOlg1MDlDZXJ0aWZpY2F0ZT5NSUlEZERDQ0FseWdBd0lCQWdJR0FYVGkxTkZhTUEwR0NTcUdTSWIzRFFFQkN3VUFNSHN4RkRBU0JnTlZCQW9UQzBkdmIyZHNaU0JKCmJtTXVNUll3RkFZRFZRUUhFdzFOYjNWdWRHRnBiaUJXYVdWM01ROHdEUVlEVlFRREV3WkhiMjluYkdVeEdEQVdCZ05WQkFzVEQwZHYKYjJkc1pTQkdiM0lnVjI5eWF6RUxNQWtHQTFVRUJoTUNWVk14RXpBUkJnTlZCQWdUQ2tOaGJHbG1iM0p1YVdFd0hoY05NakF4TURBeApNRFl5TXpVd1doY05NalV3T1RNd01EWXlNelV3V2pCN01SUXdFZ1lEVlFRS0V3dEhiMjluYkdVZ1NXNWpMakVXTUJRR0ExVUVCeE1OClRXOTFiblJoYVc0Z1ZtbGxkekVQTUEwR0ExVUVBeE1HUjI5dloyeGxNUmd3RmdZRFZRUUxFdzlIYjI5bmJHVWdSbTl5SUZkdmNtc3gKQ3pBSkJnTlZCQVlUQWxWVE1STXdFUVlEVlFRSUV3cERZV3hwWm05eWJtbGhNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QQpNSUlCQ2dLQ0FRRUE3c2dDYlFMdzUxOWRwMDVpQ3dQSGlDcXNLNGNnRVgvbWVLQ3JqTmJjVnBaVEhtSFJhMG9TRFM4L2E1eS8zSVBhCm1QZTZZN0dtSGJmUkllVXlxZW0zakp1cUk2UGc5YWZuU2RtUlV2NE9aSVRxbEI4b1k3bUwrWEhFUU1wT0c0SjkxYkFZUERFSlNCZGQKMmoxSjJtazN5ejFzbEVtVmJnbXB0bjYybGZiN1Q4L3czcHNwK1ZRR2VXVnRFM0RGUG9VMVhFWXNCY3luQmN3Zlgva3I0b09sWVlRMApNWmZ1TkFRQStaZEVhTWR5WkhHQVEyV2VwZDI1R1lnQVNROUNISkw4d0dta3dFUWxieHBHVHpzWTlqQjEzdTFwSUxWOVRKNTRvdW5kCktEQlcwMFZPQXpWb3o2WWdpcTRvSGtTOE1UeTZacXcvemZMQlNCMmtzMU9PSWtiYnlRSURBUUFCTUEwR0NTcUdTSWIzRFFFQkN3VUEKQTRJQkFRQnNBZWdpRUZZU3p3RTZ6emF0ZlcwY0lodWV0VkViZ0xnOEpnSUE5aGVQcGIxd3o5Vlc1NUNveFVTSitKdHZRaWFLRS81eAowaWlYMTdLajVacDNoSWpwb2VlbFRPcnFINEJHS09jbEZOOEthdGR3SzUyY0QxMEpZQVgwTGI4czlhTDdSQklhK0hacUl5aEgydHBECklsZmdGcHYvMUtLUHFrWkdRVmlsK2RqeUlZTXc4L2c0NWFwSm1QK3AzOW56WEJOb0VkdTF1NVg2aG5ZRUtSWG9QVzVuMjNiL09GcFoKRXZkZnVtaHIxaUhiSC9LKy9neEVURVlBcEJ4MmdoUXgyN3BUZlVuTkJxTUxuRmRvT3dYMFFXamdBY1VDd3FUZU5VcHY2TEJpMnMwNgpXWmVRUGF6dFNnQ1lXbUdnNTMva05hYVJaMzBBeDZaTTJiYlVxbGl4K3ltZDwvZHM6WDUwOUNlcnRpZmljYXRlPjwvZHM6WDUwOURhdGE+PC9kczpLZXlJbmZvPjwvZHM6U2lnbmF0dXJlPjxzYW1sMjpTdWJqZWN0PjxzYW1sMjpOYW1lSUQgRm9ybWF0PSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoxLjE6bmFtZWlkLWZvcm1hdDpYNTA5U3ViamVjdE5hbWUiPm9saXZpZXJwQGNvbnZlcnRpZ28uY29tPC9zYW1sMjpOYW1lSUQ+PHNhbWwyOlN1YmplY3RDb25maXJtYXRpb24gTWV0aG9kPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6Y206YmVhcmVyIj48c2FtbDI6U3ViamVjdENvbmZpcm1hdGlvbkRhdGEgTm90T25PckFmdGVyPSIyMDIwLTExLTE3VDE0OjUxOjQxLjAwOVoiIFJlY2lwaWVudD0iaHR0cHM6Ly9wZWRyby5jb252ZXJ0aWdvLm5ldC9jb252ZXJ0aWdvL2FwaS9TQU1MIi8+PC9zYW1sMjpTdWJqZWN0Q29uZmlybWF0aW9uPjwvc2FtbDI6U3ViamVjdD48c2FtbDI6Q29uZGl0aW9ucyBOb3RCZWZvcmU9IjIwMjAtMTEtMTdUMTQ6NDE6NDEuMDA5WiIgTm90T25PckFmdGVyPSIyMDIwLTExLTE3VDE0OjUxOjQxLjAwOVoiPjxzYW1sMjpBdWRpZW5jZVJlc3RyaWN0aW9uPjxzYW1sMjpBdWRpZW5jZT5odHRwczovL3BlZHJvLmNvbnZlcnRpZ28ubmV0L2NvbnZlcnRpZ288L3NhbWwyOkF1ZGllbmNlPjwvc2FtbDI6QXVkaWVuY2VSZXN0cmljdGlvbj48L3NhbWwyOkNvbmRpdGlvbnM+PHNhbWwyOkF1dGhuU3RhdGVtZW50IEF1dGhuSW5zdGFudD0iMjAyMC0xMS0xN1QxNDo0NTo0Ny4wMDBaIiBTZXNzaW9uSW5kZXg9Il9iNmY0ODFlMWQ0NjFhYjEwZmU3OGYwMmM0M2RiYmVjNyI+PHNhbWwyOkF1dGhuQ29udGV4dD48c2FtbDI6QXV0aG5Db250ZXh0Q2xhc3NSZWY+dXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmFjOmNsYXNzZXM6dW5zcGVjaWZpZWQ8L3NhbWwyOkF1dGhuQ29udGV4dENsYXNzUmVmPjwvc2FtbDI6QXV0aG5Db250ZXh0Pjwvc2FtbDI6QXV0aG5TdGF0ZW1lbnQ+PC9zYW1sMjpBc3NlcnRpb24+PC9zYW1sMnA6UmVzcA9uc2U+
↓TestOKAzure [core.TestCase]: 
  ↓SAMLResponse [variables.TestCaseVariable-1606233906851]: 
    value: PHNhbWxwOlJlc3BvbnNlIElEPSJfNjhlZjIzYTUtYWZiZS00MjY0LTlhNmEtZjliZjBlZjhlYTAzIiBWZXJzaW9uPSIyLjAiIElzc3VlSW5zdGFudD0iMjAyMC0xMS0yNFQxMzo0Mjo0Ni44ODhaIiBEZXN0aW5hdGlvbj0iaHR0cHM6Ly9wZWRyby5jb252ZXJ0aWdvLm5ldC9jb252ZXJ0aWdvL2FwaS9TQU1MIiBJblJlc3BvbnNlVG89IkM4T19kMmRiMTBmYy00N2ViLTQ5N2QtOTFiOC0wNmQ3NWViMjllNGYiIHhtbG5zOnNhbWxwPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6cHJvdG9jb2wiPjxJc3N1ZXIgeG1sbnM9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphc3NlcnRpb24iPmh0dHBzOi8vc3RzLndpbmRvd3MubmV0LzhhMjJkZDdlLWNmYTMtNGQ0MS04MzcwLWU1OWJiNjVhOGE3Mi88L0lzc3Vlcj48c2FtbHA6U3RhdHVzPjxzYW1scDpTdGF0dXNDb2RlIFZhbHVlPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6c3RhdHVzOlN1Y2Nlc3MiLz48L3NhbWxwOlN0YXR1cz48QXNzZXJ0aW9uIElEPSJfYzNkOTlkOTctMmY3ZS00MTkyLTkyOWEtY2JmOThhZTJiYzAwIiBJc3N1ZUluc3RhbnQ9IjIwMjAtMTEtMjRUMTM6NDI6NDYuODgzWiIgVmVyc2lvbj0iMi4wIiB4bWxucz0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmFzc2VydGlvbiI+PElzc3Vlcj5odHRwczovL3N0cy53aW5kb3dzLm5ldC84YTIyZGQ3ZS1jZmEzLTRkNDEtODM3MC1lNTliYjY1YThhNzIvPC9Jc3N1ZXI+PFNpZ25hdHVyZSB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnIyI+PFNpZ25lZEluZm8+PENhbm9uaWNhbGl6YXRpb25NZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzEwL3htbC1leGMtYzE0biMiLz48U2lnbmF0dXJlTWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8wNC94bWxkc2lnLW1vcmUjcnNhLXNoYTI1NiIvPjxSZWZlcmVuY2UgVVJJPSIjX2MzZDk5ZDk3LTJmN2UtNDE5Mi05MjlhLWNiZjk4YWUyYmMwMCI+PFRyYW5zZm9ybXM+PFRyYW5zZm9ybSBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyNlbnZlbG9wZWQtc2lnbmF0dXJlIi8+PFRyYW5zZm9ybSBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMTAveG1sLWV4Yy1jMTRuIyIvPjwvVHJhbnNmb3Jtcz48RGlnZXN0TWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8wNC94bWxlbmMjc2hhMjU2Ii8+PERpZ2VzdFZhbHVlPk1QamcxenRBQlk2aFpKYlNxS2diYWlOU1pVa2QvTzJsOHZ3ZFhTdmV4ZlE9PC9EaWdlc3RWYWx1ZT48L1JlZmVyZW5jZT48L1NpZ25lZEluZm8+PFNpZ25hdHVyZVZhbHVlPkZwTS9XUDI1QUJtWUJuRFpvQXlSQ05KeDEzY2lMNDFkT2JCZDJSWGxyZTJ1L01aVllYNG9pMGd3YXppNkYyT2JNZkt4QjZHRG8rRms4cmFTeWdzR2JmMldnd0RrWkpacjhtelVjdEVZY3dzM2RLaG9nMlBoZEU1Qmlob0c1LzRuRHQ3YTJlWDVtOGlsM0YyejVIOTV5OExBdFZxbEJaL1ZRMG0rU1RJQUsxRTBvT0RBaHNhcFJjNi9DQzU4bHVrV2hodjFncDdLdXAxT1NyQWlOdXlvbjlVbEt2TEhjNHdhdTkzbGVrR2NIOG5mZDVFTWIvZGM3d25Yd1FQc2g3WlZvTHdSN1dTTVI1Q1pqQSswRmtpV3RqUHFRU3JyalR5VmthK2Y4SStJSFlycERFL0MyZXlvb3NMMUo3Wit5NmJqeHpEYW9FbDVOZHFwS1hZN0R4TElpQT09PC9TaWduYXR1cmVWYWx1ZT48S2V5SW5mbz48WDUwOURhdGE+PFg1MDlDZXJ0aWZpY2F0ZT5NSUlDOERDQ0FkaWdBd0lCQWdJUUhSU05JRFZQaVlCSUNPcjI5RFQvTnpBTkJna3Foa2lHOXcwQkFRc0ZBREEwTVRJd01BWURWUVFERXlsTmFXTnliM052Wm5RZ1FYcDFjbVVnUm1Wa1pYSmhkR1ZrSUZOVFR5QkRaWEowYVdacFkyRjBaVEFlRncweU1ERXhNakV4TVRFd05UWmFGdzB5TXpFeE1qRXhNVEV3TlRkYU1EUXhNakF3QmdOVkJBTVRLVTFwWTNKdmMyOW1kQ0JCZW5WeVpTQkdaV1JsY21GMFpXUWdVMU5QSUVObGNuUnBabWxqWVhSbE1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBd2p3L0s3dnRISVQ2TGZJSithWmhycmlTNlhsVkNmRUpWeEYvWnV0bzl4U2djOTJhcTZFSk8xcUYrQy9kMXRrelRNWUtiR25NOHZCME9HVG4yNDJ5TDNkTllOY3pvVEpRdHhxWUpqeUsrYWZjbmUxZFB6LzFQbXpRcGI2RlJRL3FDcjlzM2tIa0VTNDQ1bFdDZzFSR0U4aXhaNkRpajJtQU1Fd3F4MUJjL2o0ZjNIMmgzOGJyY1Radzk1eGJOaFVZVUtnaWR6MG90cStiN0pGUVdNY2lQOFpTQkpBbjJJWGxDdFlVUkVTakUvN2dsQitaam5mdDJIbW9OZCttSHhGRnhqUURaVUxBTzNWTFg3Qm4rc1N2WHdLbTNXZjVERGRWVUVUQkowdGE2VnRKV1QzL0Y5a21tWXVsZU12dHZieUx5UTBSS1padDJOL3JLT3dZK3MwSTZRSURBUUFCTUEwR0NTcUdTSWIzRFFFQkN3VUFBNElCQVFDeHBsWDdKWTlsbCtmL0J2dVRGQ0J2aU42djNrblQ1R3ZoRENzbTVmb2diSHBLMFUxbjVZcnFEd3hzcFNnZHpaUk1pTStITG8vSFVCNVhycnFmVlpSenVvUWZZNWVMdWNVUFRBeUZ6ditQbVJTQzRZV3NEZFpmYlVEREIvNk5yaTBXYkJva2hEeHlWNmNZSVZFQXhzeW9aWjRTSDVkY3JEZXZHN09hVHpOS3hadDdWa1FKT1JrVVB6Mk5SbHc1c2R4b05OQW1kU2FaWTJlamtxSUZFZFhuOFdlL29hMFFBeUpRbUdpQjkvUDRoMWJwWkpXaWJzVWNXRlNUcjBvS1FoRGNFaVpmUk5xM1B1ajZTYTNpM1JHOVFCVXhnRWFTeHM1UHh6SWJadm9FNXp4TUFKZUlaYUJvNkZvL29udlFSMk9IWjFFaVJ0OFpnYWRxM1JuL1drMXQ8L1g1MDlDZXJ0aWZpY2F0ZT48L1g1MDlEYXRhPjwvS2V5SW5mbz48L1NpZ25hdHVyZT48U3ViamVjdD48TmFtZUlEIEZvcm1hdD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOm5hbWVpZC1mb3JtYXQ6dHJhbnNpZW50Ij52UklQMGtQbHpUQWlyenNmRjdZWWIreEtseGMxV3ZxRFpYY21kMmIvTWxJPTwvTmFtZUlEPjxTdWJqZWN0Q29uZmlybWF0aW9uIE1ldGhvZD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmNtOmJlYXJlciI+PFN1YmplY3RDb25maXJtYXRpb25EYXRhIEluUmVzcG9uc2VUbz0iQzhPX2QyZGIxMGZjLTQ3ZWItNDk3ZC05MWI4LTA2ZDc1ZWIyOWU0ZiIgTm90T25PckFmdGVyPSIyMDIwLTExLTI0VDE0OjQyOjQ2LjcwM1oiIFJlY2lwaWVudD0iaHR0cHM6Ly9wZWRyby5jb252ZXJ0aWdvLm5ldC9jb252ZXJ0aWdvL2FwaS9TQU1MIi8+PC9TdWJqZWN0Q29uZmlybWF0aW9uPjwvU3ViamVjdD48Q29uZGl0aW9ucyBOb3RCZWZvcmU9IjIwMjAtMTEtMjRUMTM6Mzc6NDYuNzAzWiIgTm90T25PckFmdGVyPSIyMDIwLTExLTI0VDE0OjQyOjQ2LjcwM1oiPjxBdWRpZW5jZVJlc3RyaWN0aW9uPjxBdWRpZW5jZT5odHRwczovL3BlZHJvLmNvbnZlcnRpZ28ubmV0L2NvbnZlcnRpZ288L0F1ZGllbmNlPjwvQXVkaWVuY2VSZXN0cmljdGlvbj48L0NvbmRpdGlvbnM+PEF0dHJpYnV0ZVN0YXRlbWVudD48QXR0cmlidXRlIE5hbWU9Imh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vaWRlbnRpdHkvY2xhaW1zL3RlbmFudGlkIj48QXR0cmlidXRlVmFsdWU+OGEyMmRkN2UtY2ZhMy00ZDQxLTgzNzAtZTU5YmI2NWE4YTcyPC9BdHRyaWJ1dGVWYWx1ZT48L0F0dHJpYnV0ZT48QXR0cmlidXRlIE5hbWU9Imh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vaWRlbnRpdHkvY2xhaW1zL29iamVjdGlkZW50aWZpZXIiPjxBdHRyaWJ1dGVWYWx1ZT5hNjcyMThmYi01MTk4LTQ2ZTUtYWJiOC1lYjg4NDExNjI3Yjc8L0F0dHJpYnV0ZVZhbHVlPjwvQXR0cmlidXRlPjxBdHRyaWJ1dGUgTmFtZT0iaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9pZGVudGl0eS9jbGFpbXMvZGlzcGxheW5hbWUiPjxBdHRyaWJ1dGVWYWx1ZT5PbGl2aWVyIFBpY2Npb3R0bzwvQXR0cmlidXRlVmFsdWU+PC9BdHRyaWJ1dGU+PEF0dHJpYnV0ZSBOYW1lPSJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL2lkZW50aXR5L2NsYWltcy9pZGVudGl0eXByb3ZpZGVyIj48QXR0cmlidXRlVmFsdWU+aHR0cHM6Ly9zdHMud2luZG93cy5uZXQvOGEyMmRkN2UtY2ZhMy00ZDQxLTgzNzAtZTU5YmI2NWE4YTcyLzwvQXR0cmlidXRlVmFsdWU+PC9BdHRyaWJ1dGU+PEF0dHJpYnV0ZSBOYW1lPSJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL2NsYWltcy9hdXRobm1ldGhvZHNyZWZlcmVuY2VzIj48QXR0cmlidXRlVmFsdWU+aHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS93cy8yMDA4LzA2L2lkZW50aXR5L2F1dGhlbnRpY2F0aW9ubWV0aG9kL3Bhc3N3b3JkPC9BdHRyaWJ1dGVWYWx1ZT48L0F0dHJpYnV0ZT48QXR0cmlidXRlIE5hbWU9Imh0dHA6Ly9zY2hlbWFzLnhtbHNvYXAub3JnL3dzLzIwMDUvMDUvaWRlbnRpdHkvY2xhaW1zL2dpdmVubmFtZSI+PEF0dHJpYnV0ZVZhbHVlPk9saXZpZXI8L0F0dHJpYnV0ZVZhbHVlPjwvQXR0cmlidXRlPjxBdHRyaWJ1dGUgTmFtZT0iaHR0cDovL3NjaGVtYXMueG1sc29hcC5vcmcvd3MvMjAwNS8wNS9pZGVudGl0eS9jbGFpbXMvc3VybmFtZSI+PEF0dHJpYnV0ZVZhbHVlPlBpY2Npb3R0bzwvQXR0cmlidXRlVmFsdWU+PC9BdHRyaWJ1dGU+PEF0dHJpYnV0ZSBOYW1lPSJodHRwOi8vc2NoZW1hcy54bWxzb2FwLm9yZy93cy8yMDA1LzA1L2lkZW50aXR5L2NsYWltcy9uYW1lIj48QXR0cmlidXRlVmFsdWU+b2xpdmllcnBAQ29udmVydGlnby5vbm1pY3Jvc29mdC5jb208L0F0dHJpYnV0ZVZhbHVlPjwvQXR0cmlidXRlPjwvQXR0cmlidXRlU3RhdGVtZW50PjxBdXRoblN0YXRlbWVudCBBdXRobkluc3RhbnQ9IjIwMjAtMTEtMjRUMTE6MzY6MjUuMzcxWiIgU2Vzc2lvbkluZGV4PSJfYzNkOTlkOTctMmY3ZS00MTkyLTkyOWEtY2JmOThhZTJiYzAwIj48QXV0aG5Db250ZXh0PjxBdXRobkNvbnRleHRDbGFzc1JlZj51cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6YWM6Y2xhc3NlczpQYXNzd29yZDwvQXV0aG5Db250ZXh0Q2xhc3NSZWY+PC9BdXRobkNvbnRleHQ+PC9BdXRoblN0YXRlbWVudD48L0Fzc2VydGlvbj48L3NhbWxwOlJlc3BvbnNlPg==
↓TestOKGoogle [core.TestCase]: 
  ↓SAMLResponse [variables.TestCaseVariable-1605895651911]: 
    value: PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9Im5vIj8+PHNhbWwycDpSZXNwb25zZSB4bWxuczpzYW1sMnA9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpwcm90b2NvbCIgRGVzdGluYXRpb249Imh0dHBzOi8vcGVkcm8uY29udmVydGlnby5uZXQvY29udmVydGlnby9hcGkvU0FNTCIgSUQ9Il80MzFhZWQzYjdiYzRkNDY0MTgxOWM1ZDMyM2RkNmFlMCIgSXNzdWVJbnN0YW50PSIyMDIwLTExLTE3VDE0OjQ2OjQxLjAwOVoiIFZlcnNpb249IjIuMCI+PHNhbWwyOklzc3VlciB4bWxuczpzYW1sMj0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmFzc2VydGlvbiI+aHR0cHM6Ly9hY2NvdW50cy5nb29nbGUuY29tL28vc2FtbDI\/aWRwaWQ9QzAybXlvbjFxPC9zYW1sMjpJc3N1ZXI+PHNhbWwycDpTdGF0dXM+PHNhbWwycDpTdGF0dXNDb2RlIFZhbHVlPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6c3RhdHVzOlN1Y2Nlc3MiLz48L3NhbWwycDpTdGF0dXM+PHNhbWwyOkFzc2VydGlvbiB4bWxuczpzYW1sMj0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmFzc2VydGlvbiIgSUQ9Il9iNmY0ODFlMWQ0NjFhYjEwZmU3OGYwMmM0M2RiYmVjNyIgSXNzdWVJbnN0YW50PSIyMDIwLTExLTE3VDE0OjQ2OjQxLjAwOVoiIFZlcnNpb249IjIuMCI+PHNhbWwyOklzc3Vlcj5odHRwczovL2FjY291bnRzLmdvb2dsZS5jb20vby9zYW1sMj9pZHBpZD1DMDJteW9uMXE8L3NhbWwyOklzc3Vlcj48ZHM6U2lnbmF0dXJlIHhtbG5zOmRzPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjIj48ZHM6U2lnbmVkSW5mbz48ZHM6Q2Fub25pY2FsaXphdGlvbk1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMTAveG1sLWV4Yy1jMTRuIyIvPjxkczpTaWduYXR1cmVNZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzA0L3htbGRzaWctbW9yZSNyc2Etc2hhMjU2Ii8+PGRzOlJlZmVyZW5jZSBVUkk9IiNfYjZmNDgxZTFkNDYxYWIxMGZlNzhmMDJjNDNkYmJlYzciPjxkczpUcmFuc2Zvcm1zPjxkczpUcmFuc2Zvcm0gQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjZW52ZWxvcGVkLXNpZ25hdHVyZSIvPjxkczpUcmFuc2Zvcm0gQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzEwL3htbC1leGMtYzE0biMiLz48L2RzOlRyYW5zZm9ybXM+PGRzOkRpZ2VzdE1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMDQveG1sZW5jI3NoYTI1NiIvPjxkczpEaWdlc3RWYWx1ZT5GOGhjN01CMGxPQ2VjOHFJRzJGKzRPa1JYUCs4cm9QeURFRXZuQTBQRUhBPTwvZHM6RGlnZXN0VmFsdWU+PC9kczpSZWZlcmVuY2U+PC9kczpTaWduZWRJbmZvPjxkczpTaWduYXR1cmVWYWx1ZT5wWUY1bnFpWjYydmY4MUNIcFVlWkpSVmM1bEtKMnUxMVBBUGI2Q3V0ek8vVDdROTRTSHRMTFVuM3hZZ0FPY1BPU0FVYktBZFkzRDZWCjJsemRQRktVWFRzaWhtWVVlTGxQN29HS0NSNmRLMjNSclpIL2t2VkxIWGYyYmNKUnFFdDRGTmZaNFdvV3RSK2dqeWIwdGNuT09VcnMKWEc1TXlZTmQ2WHF2VEpya2dkalJEVEZvWWU3cjVBVm95YUE5RVMwWW0rZUZyK2pTL0d0cEthcDU4TXl6KzZPTE96SDMrZEIyVjh4RQpsbUJqdkRCb1VSNGk3SkVON1k3RlZ1V0hkSHY3RC9HN2N2bzVZdnlBMDRXS3Q4dGcvT0txdGRLQUprWmhTalR5WE1wZ0ZwVnVRVkhNCmJla1hqVnA0Mm9RNUM4Q0hVT1lnMlp6NDBTYW9BamwzL21TTk1nPT08L2RzOlNpZ25hdHVyZVZhbHVlPjxkczpLZXlJbmZvPjxkczpYNTA5RGF0YT48ZHM6WDUwOVN1YmplY3ROYW1lPlNUPUNhbGlmb3JuaWEsQz1VUyxPVT1Hb29nbGUgRm9yIFdvcmssQ049R29vZ2xlLEw9TW91bnRhaW4gVmlldyxPPUdvb2dsZSBJbmMuPC9kczpYNTA5U3ViamVjdE5hbWU+PGRzOlg1MDlDZXJ0aWZpY2F0ZT5NSUlEZERDQ0FseWdBd0lCQWdJR0FYVGkxTkZhTUEwR0NTcUdTSWIzRFFFQkN3VUFNSHN4RkRBU0JnTlZCQW9UQzBkdmIyZHNaU0JKCmJtTXVNUll3RkFZRFZRUUhFdzFOYjNWdWRHRnBiaUJXYVdWM01ROHdEUVlEVlFRREV3WkhiMjluYkdVeEdEQVdCZ05WQkFzVEQwZHYKYjJkc1pTQkdiM0lnVjI5eWF6RUxNQWtHQTFVRUJoTUNWVk14RXpBUkJnTlZCQWdUQ2tOaGJHbG1iM0p1YVdFd0hoY05NakF4TURBeApNRFl5TXpVd1doY05NalV3T1RNd01EWXlNelV3V2pCN01SUXdFZ1lEVlFRS0V3dEhiMjluYkdVZ1NXNWpMakVXTUJRR0ExVUVCeE1OClRXOTFiblJoYVc0Z1ZtbGxkekVQTUEwR0ExVUVBeE1HUjI5dloyeGxNUmd3RmdZRFZRUUxFdzlIYjI5bmJHVWdSbTl5SUZkdmNtc3gKQ3pBSkJnTlZCQVlUQWxWVE1STXdFUVlEVlFRSUV3cERZV3hwWm05eWJtbGhNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QQpNSUlCQ2dLQ0FRRUE3c2dDYlFMdzUxOWRwMDVpQ3dQSGlDcXNLNGNnRVgvbWVLQ3JqTmJjVnBaVEhtSFJhMG9TRFM4L2E1eS8zSVBhCm1QZTZZN0dtSGJmUkllVXlxZW0zakp1cUk2UGc5YWZuU2RtUlV2NE9aSVRxbEI4b1k3bUwrWEhFUU1wT0c0SjkxYkFZUERFSlNCZGQKMmoxSjJtazN5ejFzbEVtVmJnbXB0bjYybGZiN1Q4L3czcHNwK1ZRR2VXVnRFM0RGUG9VMVhFWXNCY3luQmN3Zlgva3I0b09sWVlRMApNWmZ1TkFRQStaZEVhTWR5WkhHQVEyV2VwZDI1R1lnQVNROUNISkw4d0dta3dFUWxieHBHVHpzWTlqQjEzdTFwSUxWOVRKNTRvdW5kCktEQlcwMFZPQXpWb3o2WWdpcTRvSGtTOE1UeTZacXcvemZMQlNCMmtzMU9PSWtiYnlRSURBUUFCTUEwR0NTcUdTSWIzRFFFQkN3VUEKQTRJQkFRQnNBZWdpRUZZU3p3RTZ6emF0ZlcwY0lodWV0VkViZ0xnOEpnSUE5aGVQcGIxd3o5Vlc1NUNveFVTSitKdHZRaWFLRS81eAowaWlYMTdLajVacDNoSWpwb2VlbFRPcnFINEJHS09jbEZOOEthdGR3SzUyY0QxMEpZQVgwTGI4czlhTDdSQklhK0hacUl5aEgydHBECklsZmdGcHYvMUtLUHFrWkdRVmlsK2RqeUlZTXc4L2c0NWFwSm1QK3AzOW56WEJOb0VkdTF1NVg2aG5ZRUtSWG9QVzVuMjNiL09GcFoKRXZkZnVtaHIxaUhiSC9LKy9neEVURVlBcEJ4MmdoUXgyN3BUZlVuTkJxTUxuRmRvT3dYMFFXamdBY1VDd3FUZU5VcHY2TEJpMnMwNgpXWmVRUGF6dFNnQ1lXbUdnNTMva05hYVJaMzBBeDZaTTJiYlVxbGl4K3ltZDwvZHM6WDUwOUNlcnRpZmljYXRlPjwvZHM6WDUwOURhdGE+PC9kczpLZXlJbmZvPjwvZHM6U2lnbmF0dXJlPjxzYW1sMjpTdWJqZWN0PjxzYW1sMjpOYW1lSUQgRm9ybWF0PSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoxLjE6bmFtZWlkLWZvcm1hdDpYNTA5U3ViamVjdE5hbWUiPm9saXZpZXJwQGNvbnZlcnRpZ28uY29tPC9zYW1sMjpOYW1lSUQ+PHNhbWwyOlN1YmplY3RDb25maXJtYXRpb24gTWV0aG9kPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6Y206YmVhcmVyIj48c2FtbDI6U3ViamVjdENvbmZpcm1hdGlvbkRhdGEgTm90T25PckFmdGVyPSIyMDIwLTExLTE3VDE0OjUxOjQxLjAwOVoiIFJlY2lwaWVudD0iaHR0cHM6Ly9wZWRyby5jb252ZXJ0aWdvLm5ldC9jb252ZXJ0aWdvL2FwaS9TQU1MIi8+PC9zYW1sMjpTdWJqZWN0Q29uZmlybWF0aW9uPjwvc2FtbDI6U3ViamVjdD48c2FtbDI6Q29uZGl0aW9ucyBOb3RCZWZvcmU9IjIwMjAtMTEtMTdUMTQ6NDE6NDEuMDA5WiIgTm90T25PckFmdGVyPSIyMDIwLTExLTE3VDE0OjUxOjQxLjAwOVoiPjxzYW1sMjpBdWRpZW5jZVJlc3RyaWN0aW9uPjxzYW1sMjpBdWRpZW5jZT5odHRwczovL3BlZHJvLmNvbnZlcnRpZ28ubmV0L2NvbnZlcnRpZ288L3NhbWwyOkF1ZGllbmNlPjwvc2FtbDI6QXVkaWVuY2VSZXN0cmljdGlvbj48L3NhbWwyOkNvbmRpdGlvbnM+PHNhbWwyOkF1dGhuU3RhdGVtZW50IEF1dGhuSW5zdGFudD0iMjAyMC0xMS0xN1QxNDo0NTo0Ny4wMDBaIiBTZXNzaW9uSW5kZXg9Il9iNmY0ODFlMWQ0NjFhYjEwZmU3OGYwMmM0M2RiYmVjNyI+PHNhbWwyOkF1dGhuQ29udGV4dD48c2FtbDI6QXV0aG5Db250ZXh0Q2xhc3NSZWY+dXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmFjOmNsYXNzZXM6dW5zcGVjaWZpZWQ8L3NhbWwyOkF1dGhuQ29udGV4dENsYXNzUmVmPjwvc2FtbDI6QXV0aG5Db250ZXh0Pjwvc2FtbDI6QXV0aG5TdGF0ZW1lbnQ+PC9zYW1sMjpBc3NlcnRpb24+PC9zYW1sMnA6UmVzcG9uc2U+